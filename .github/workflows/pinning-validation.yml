name: Pinning Validation

on:
  workflow_dispatch:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  pinning:
    name: Validate GitHub Actions and container image pins
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Quick local pincheck (if present)
        run: |
          if [ -x ./.security-controls/bin/pinactlite ]; then
            ./.security-controls/bin/pinactlite pincheck --dir .github/workflows
          else
            echo "Local pinactlite helper not present; skipping quick check."
          fi

      - name: Install and verify tools, then install pinact v3.4.2
        run: |
          set -euo pipefail
          mkdir -p "$HOME/.local/bin"
          export PATH="$HOME/.local/bin:$PATH"
          
          # 1) Install cosign v2.6.0 and verify with SHA256
          COSIGN_VERSION=v2.6.0
          COSIGN_BASE="https://github.com/sigstore/cosign/releases/download/${COSIGN_VERSION}"
          COSIGN_BIN="cosign-linux-amd64"
          COSIGN_SHA="ea5c65f99425d6cfbb5c4b5de5dac035f14d09131c1a0ea7c7fc32eab39364f9"
          curl -fsSLo /tmp/${COSIGN_BIN} "${COSIGN_BASE}/${COSIGN_BIN}"
          echo "${COSIGN_SHA}  /tmp/${COSIGN_BIN}" | sha256sum -c -
          install -m 0755 /tmp/${COSIGN_BIN} "$HOME/.local/bin/cosign"
          
          # 2) Install slsa-verifier v2.7.1 and verify SHA256
          SLSA_VERIFIER_VERSION=v2.7.1
          SLSA_BIN="slsa-verifier-linux-amd64"
          SLSA_BASE="https://github.com/slsa-framework/slsa-verifier/releases/download/${SLSA_VERIFIER_VERSION}"
          SLSA_SHA="946dbec729094195e88ef78e1734324a27869f03e2c6bd2f61cbc06bd5350339"
          curl -fsSLo /tmp/${SLSA_BIN} "${SLSA_BASE}/${SLSA_BIN}"
          echo "${SLSA_SHA}  /tmp/${SLSA_BIN}" | sha256sum -c -
          install -m 0755 /tmp/${SLSA_BIN} "$HOME/.local/bin/slsa-verifier"
          
          # 3) Download pinact v3.4.2 artifacts and verify signature + provenance + checksum
          VERSION=v3.4.2
          BASE="https://github.com/suzuki-shunsuke/pinact/releases/download/${VERSION}"

          # Fetch checksums and signature (prefer versioned filenames; fallback to plain)
          curl -fsSLo /tmp/checksums.txt "${BASE}/pinact_${VERSION#v}_checksums.txt" || \
          curl -fsSLo /tmp/checksums.txt "${BASE}/checksums.txt"

          curl -fsSLo /tmp/checksums.txt.pem "${BASE}/pinact_${VERSION#v}_checksums.txt.pem" || \
          curl -fsSLo /tmp/checksums.txt.pem "${BASE}/checksums.txt.pem"

          curl -fsSLo /tmp/checksums.txt.sig "${BASE}/pinact_${VERSION#v}_checksums.txt.sig" || \
          curl -fsSLo /tmp/checksums.txt.sig "${BASE}/checksums.txt.sig"
          
          # Sigstore verification of checksums.txt certificate and signature (GitHub OIDC issuer)
          cosign verify-blob \
            --certificate /tmp/checksums.txt.pem \
            --signature /tmp/checksums.txt.sig \
            --certificate-oidc-issuer https://token.actions.githubusercontent.com \
            --certificate-identity-regexp '^https://github.com/suzuki-shunsuke/(pinact|go-release-workflow)/.*' \
            /tmp/checksums.txt
          
          # OpenSSL verification as defense in depth
          # 1) Extract pubkey from certificate: try PEM directly, else decode base64-wrapped cert
          if ! openssl x509 -in /tmp/checksums.txt.pem -pubkey -noout > /tmp/pinact.pub 2>/dev/null; then
            base64 -d /tmp/checksums.txt.pem > /tmp/checksums.txt.pem.dec
            openssl x509 -in /tmp/checksums.txt.pem.dec -pubkey -noout > /tmp/pinact.pub
          fi
          # 2) Prepare signature: decode base64 if needed, else use raw signature
          if ! base64 -d /tmp/checksums.txt.sig > /tmp/checksums.txt.sig.bin 2>/dev/null; then
            cp /tmp/checksums.txt.sig /tmp/checksums.txt.sig.bin
          fi
          # 3) Verify
          openssl dgst -sha256 -verify /tmp/pinact.pub -signature /tmp/checksums.txt.sig.bin /tmp/checksums.txt

          # Determine Linux amd64 tarball name from checksums (support multiple conventions)
          TARBALL=""
          for name in "pinact_${VERSION#v}_linux_amd64.tar.gz" "pinact_linux_amd64.tar.gz" \
                     "pinact_${VERSION#v}_Linux_x86_64.tar.gz" "pinact_Linux_x86_64.tar.gz"; do
            if grep -q " ${name}$" /tmp/checksums.txt; then
              TARBALL="$name"; break
            fi
          done
          if [[ -z "$TARBALL" ]]; then
            echo "Unable to determine tarball name from checksums.txt" >&2
            echo "Available entries:" >&2
            cat /tmp/checksums.txt >&2
            exit 1
          fi

          # Download the tarball using the discovered name
          curl -fsSLo "/tmp/${TARBALL}" "${BASE}/${TARBALL}"

          # Checksum verification of the tarball
          awk -v tar="${TARBALL}" -v path="/tmp/${TARBALL}" '$2==tar { print $1, path }' /tmp/checksums.txt | sha256sum -c -

          # Try to download provenance with fallbacks
          PROV=""
          for prov in multiple.intoto.jsonl provenance.intoto.jsonl attestation.intoto.jsonl; do
            if curl -fsSLo "/tmp/${prov}" "${BASE}/${prov}"; then PROV="/tmp/${prov}"; break; fi
          done

          # SLSA provenance verification for the tarball (if provenance is available)
          if [[ -n "${PROV}" ]]; then
            slsa-verifier verify-artifact \
              --provenance-path "${PROV}" \
              --source-uri github.com/suzuki-shunsuke/pinact \
              --source-tag "${VERSION}" \
              "/tmp/${TARBALL}"
          else
            echo "Provenance file not found for ${VERSION}; skipping SLSA verification"
          fi
          
          # Extract and install pinact
          tar -xzf "/tmp/${TARBALL}"
          install -m 0755 pinact "$HOME/.local/bin/pinact"
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"

      - name: Verify pinact version (non-blocking)
        run: |
          pinact --version || true

      - name: Auto-fix unpinned actions with pinact
        id: pinact_fix
        run: |
          # Run pinact to auto-pin any unpinned actions
          pinact run

          # Check if any files were modified
          if git diff --quiet; then
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "âœ… All actions are already pinned"
          else
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "ðŸ“Œ Auto-pinned actions:"
            git diff --stat
          fi

      - name: Commit auto-pinned changes
        if: steps.pinact_fix.outputs.changed == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add .github/workflows/
          git commit -m "chore: auto-pin GitHub Actions to SHA

          Auto-pinned by pinact v3.4.2 via Pinning Validation workflow

          ðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)"

      - name: Push auto-pinned changes
        if: steps.pinact_fix.outputs.changed == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}

      - name: Alert about unpinned actions that were fixed
        if: steps.pinact_fix.outputs.changed == 'true'
        run: |
          echo "::warning::Unpinned actions were detected and automatically fixed. Changes have been committed."
          exit 0
