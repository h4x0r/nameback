name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., v0.3.0)'
        required: true
        type: string

permissions:
  contents: write
  id-token: write
  attestations: write

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 0  # Fetch all history for changelog generation

      - name: Get version from tag
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.tag }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"

      - name: Generate release notes from commits
        id: release_notes
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"

          # Get previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 ${VERSION}^ 2>/dev/null || echo "")

          if [ -z "$PREV_TAG" ]; then
            # First release - get all commits
            COMMITS=$(git log --pretty=format:"- %s" --no-merges)
          else
            # Get commits since previous tag
            COMMITS=$(git log --pretty=format:"- %s" --no-merges ${PREV_TAG}..${VERSION})
          fi

          # Generate release notes
          {
            echo "release_notes<<EOF"
            echo "## What's New"
            echo ""
            echo "$COMMITS"
            echo ""
            echo "## Full Changelog"
            if [ -n "$PREV_TAG" ]; then
              echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREV_TAG}...${VERSION}"
            fi
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@c062e08bd532815e2082a85e87e3ef29c3e6d191 # v2.0.8
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: Release ${{ steps.get_version.outputs.version }}
          body: |
            ${{ steps.release_notes.outputs.release_notes }}

            ---

            ## Installation

            ### Windows

            Download and install `nameback-x86_64-pc-windows-msvc.msi`

            **What you get:**
            - 🖥️ **CLI**: Type `nameback` in any terminal (automatically added to PATH)
            - 🎨 **GUI**: Launch from Start Menu → nameback
            - ⚙️ **Auto-install dependencies**: exiftool, tesseract, ffmpeg, imagemagick installed automatically

            ### macOS

            **CLI Users (Recommended: Homebrew)**
            ```bash
            brew tap h4x0r/nameback
            brew install nameback
            ```
            Automatically installs all dependencies.

            **GUI Users**
            - Intel Mac: Download `nameback-x86_64-apple-darwin.dmg`
            - Apple Silicon: Download `nameback-aarch64-apple-darwin.dmg`

            Drag to Applications folder and launch!

            ### Linux

            ```bash
            cargo install nameback
            nameback --install-deps
            ```

            ## Verification

            All installers include SHA256 checksums in `checksums.txt`

            ---
            🤖 Generated with [Claude Code](https://claude.com/claude-code)
          draft: false
          prerelease: false

  build-release:
    name: Build ${{ matrix.target }}
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            archive: zip

          # macOS Intel
          - target: x86_64-apple-darwin
            os: macos-13
            archive: dmg

          # macOS Apple Silicon
          - target: aarch64-apple-darwin
            os: macos-latest
            archive: dmg

          # Linux (Debian package)
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            archive: deb

    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@21dc36fb71dd22e3317045c0c31a3f4249868b17 # stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Install dependencies (macOS only)
        if: runner.os == 'macOS'
        run: |
          brew install exiftool tesseract tesseract-lang ffmpeg imagemagick pkg-config

      - name: Cache vcpkg (Windows only)
        if: matrix.os == 'windows-latest'
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: C:\vcpkg\installed
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-

      - name: Install vcpkg and dependencies (Windows only)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          if (-not (Test-Path C:\vcpkg)) {
            Write-Host "Cloning vcpkg..."
            git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg
          } else {
            Write-Host "vcpkg already exists, skipping clone"
          }
          cd C:\vcpkg
          if (-not (Test-Path .\vcpkg.exe)) {
            Write-Host "Bootstrapping vcpkg..."
            .\bootstrap-vcpkg.bat
          }
          Write-Host "Installing leptonica and tesseract..."
          .\vcpkg integrate install
          .\vcpkg install leptonica:x64-windows-static-md tesseract:x64-windows-static-md

      - name: Set VCPKG_ROOT and triplet (Windows only)
        if: matrix.os == 'windows-latest'
        run: |
          echo "VCPKG_ROOT=C:\vcpkg" >> $GITHUB_ENV
          echo "VCPKGRS_TRIPLET=x64-windows-static-md" >> $GITHUB_ENV
        shell: bash

      - name: Build CLI release binary
        if: matrix.archive != 'deb'
        run: cargo build --release --target ${{ matrix.target }} -p nameback

      - name: Build GUI release binary
        if: matrix.archive != 'deb'
        run: cargo build --release --target ${{ matrix.target }} -p nameback-gui

      - name: Strip binaries (macOS only)
        if: matrix.archive == 'dmg'
        run: |
          strip target/${{ matrix.target }}/release/nameback-gui

      - name: Create DMG installer (macOS only)
        if: matrix.archive == 'dmg'
        run: |
          mkdir -p dmg-temp
          cp target/${{ matrix.target }}/release/nameback-gui dmg-temp/nameback.app
          chmod +x dmg-temp/nameback.app

          # Create DMG
          hdiutil create -volname "nameback" -srcfolder dmg-temp -ov -format UDZO nameback-${{ matrix.target }}.dmg

          # Clean up
          rm -rf dmg-temp

      - name: Generate DMG checksum (macOS only)
        if: matrix.archive == 'dmg'
        run: |
          shasum -a 256 nameback-${{ matrix.target }}.dmg > checksums-temp.txt

      - name: Install Debian build dependencies (Linux only)
        if: matrix.archive == 'deb'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            debhelper \
            devscripts \
            lintian \
            libimage-exiftool-perl \
            tesseract-ocr \
            ffmpeg \
            imagemagick \
            pkg-config \
            libleptonica-dev \
            libtesseract-dev \
            libclang-dev \
            clang

          # Verify leptonica installation
          echo "Verifying leptonica installation..."
          pkg-config --exists lept && echo "✓ lept.pc found" || echo "✗ lept.pc not found"
          pkg-config --modversion lept || echo "Could not get lept version"
          echo "PKG_CONFIG_PATH: $PKG_CONFIG_PATH"
          find /usr -name "lept.pc" 2>/dev/null || echo "lept.pc not found in /usr"

      - name: Build Debian package (Linux only)
        if: matrix.archive == 'deb'
        run: |
          # Build both binaries
          cargo build --release --workspace

          # Create package structure
          mkdir -p debian-pkg/DEBIAN
          mkdir -p debian-pkg/usr/bin
          mkdir -p debian-pkg/usr/share/applications
          mkdir -p debian-pkg/usr/share/doc/nameback

          # Copy binaries
          cp target/release/nameback debian-pkg/usr/bin/
          cp target/release/nameback-gui debian-pkg/usr/bin/
          chmod 755 debian-pkg/usr/bin/*

          # Copy desktop entry
          cp debian/nameback.desktop debian-pkg/usr/share/applications/

          # Copy documentation
          cp README.md debian-pkg/usr/share/doc/nameback/
          cp LICENSE debian-pkg/usr/share/doc/nameback/copyright

          # Create control file
          VERSION=${{ needs.create-release.outputs.version }}
          VERSION_NUM=${VERSION#v}  # Remove 'v' prefix
          cat > debian-pkg/DEBIAN/control << EOF
          Package: nameback
          Version: ${VERSION_NUM}-1
          Section: utils
          Priority: optional
          Architecture: amd64
          Depends: libimage-exiftool-perl, tesseract-ocr, tesseract-ocr-chi-tra, tesseract-ocr-chi-sim, ffmpeg, imagemagick
          Maintainer: Albert Hui <albert@example.com>
          Description: Intelligent file renaming based on metadata
           nameback renames files based on their embedded metadata, extracting titles,
           dates, and descriptions to give files meaningful names. It supports a wide
           range of file types including images, videos, PDFs, documents, and more.
           .
           Key Features:
            * Smart metadata extraction from EXIF, PDF, and document fields
            * OCR support for images and video frames (160+ languages)
            * Multi-frame video analysis for better accuracy
            * HEIC/HEIF image support
            * Both CLI and GUI interfaces included
           .
           This package is particularly useful for digital forensics, DFIR workflows,
           organizing recovered files from data recovery tools, and managing large
           photo/video collections.
          Homepage: https://github.com/h4x0r/nameback
          EOF

          # Build .deb package
          dpkg-deb --build --root-owner-group debian-pkg nameback_${VERSION_NUM}-1_amd64.deb

      - name: Run lintian checks (Linux only)
        if: matrix.archive == 'deb'
        run: |
          VERSION=${{ needs.create-release.outputs.version }}
          VERSION_NUM=${VERSION#v}
          lintian --no-tag-display-limit nameback_${VERSION_NUM}-1_amd64.deb || true

      - name: Generate DEB checksum (Linux only)
        if: matrix.archive == 'deb'
        run: |
          VERSION=${{ needs.create-release.outputs.version }}
          VERSION_NUM=${VERSION#v}
          sha256sum nameback_${VERSION_NUM}-1_amd64.deb > checksums-temp.txt

      - name: Upload Debian package to release (Linux only)
        if: matrix.archive == 'deb'
        uses: softprops/action-gh-release@c062e08bd532815e2082a85e87e3ef29c3e6d191 # v2.0.8
        with:
          tag_name: ${{ needs.create-release.outputs.version }}
          files: |
            nameback_*_amd64.deb

      - name: Create archive with CLI and GUI (Windows)
        if: matrix.archive == 'zip'
        shell: pwsh
        run: |
          cd target/${{ matrix.target }}/release
          Compress-Archive -Path nameback.exe,nameback-gui.exe -DestinationPath ../../../nameback-${{ matrix.target }}.zip
          cd ../../..

      - name: Generate ZIP checksum (Windows)
        if: matrix.archive == 'zip'
        shell: pwsh
        run: |
          $hash = (Get-FileHash -Algorithm SHA256 nameback-${{ matrix.target }}.zip).Hash.ToLower()
          "$hash  nameback-${{ matrix.target }}.zip" | Out-File -Encoding ASCII checksums-temp.txt

      - name: Upload installer to release
        uses: softprops/action-gh-release@c062e08bd532815e2082a85e87e3ef29c3e6d191 # v2.0.8
        with:
          tag_name: ${{ needs.create-release.outputs.version }}
          files: |
            nameback-${{ matrix.target }}.${{ matrix.archive }}

      - name: Install WiX Toolset (Windows only)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          dotnet tool install --global wix
          wix extension add -g WixToolset.UI.wixext

      - name: Build MSI installer (Windows only)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          wix build -arch x64 -o nameback-${{ matrix.target }}.msi installer/nameback.wxs

      - name: Generate MSI checksum (Windows only)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $hash = (Get-FileHash -Algorithm SHA256 nameback-${{ matrix.target }}.msi).Hash.ToLower()
          "$hash  nameback-${{ matrix.target }}.msi" | Out-File -Encoding ASCII -Append checksums-temp.txt

      - name: Upload MSI installer (Windows only)
        if: matrix.os == 'windows-latest'
        uses: softprops/action-gh-release@c062e08bd532815e2082a85e87e3ef29c3e6d191 # v2.0.8
        with:
          tag_name: ${{ needs.create-release.outputs.version }}
          files: nameback-${{ matrix.target }}.msi

      - name: Upload checksums
        uses: softprops/action-gh-release@c062e08bd532815e2082a85e87e3ef29c3e6d191 # v2.0.8
        with:
          tag_name: ${{ needs.create-release.outputs.version }}
          files: checksums-temp.txt

  generate-checksums:
    name: Generate Combined Checksums
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    steps:
      - name: Download all checksum files
        uses: robinraju/release-downloader@a96f54c1b5f5e09e47d9504526e96febd949d4c2 # v1.11
        with:
          tag: ${{ needs.create-release.outputs.version }}
          fileName: 'checksums-temp.txt'
          out-file-path: checksums

      - name: Combine checksums
        run: |
          cat checksums/checksums-temp.txt* > checksums.txt
          echo "Combined checksums:"
          cat checksums.txt

      - name: Upload combined checksums
        uses: softprops/action-gh-release@c062e08bd532815e2082a85e87e3ef29c3e6d191 # v2.0.8
        with:
          tag_name: ${{ needs.create-release.outputs.version }}
          files: checksums.txt

      - name: Delete temporary checksum files
        run: |
          gh release delete-asset ${{ needs.create-release.outputs.version }} checksums-temp.txt --yes || true
        env:
          GH_TOKEN: ${{ github.token }}

  publish-crates-io:
    name: Publish to crates.io
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    # Skip publishing for pre-release tags (e.g., -test, -rc, -alpha, -beta)
    if: ${{ !contains(needs.create-release.outputs.version, '-') }}
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@21dc36fb71dd22e3317045c0c31a3f4249868b17 # stable
        with:
          toolchain: stable

      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: cargo publish --allow-dirty --no-verify
