name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., v0.3.0)'
        required: true
        type: string

permissions:
  contents: write
  id-token: write
  attestations: write

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 0  # Fetch all history for changelog generation

      - name: Get version from tag
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.tag }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"

      - name: Generate release notes from commits
        id: release_notes
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"

          # Get previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 ${VERSION}^ 2>/dev/null || echo "")

          if [ -z "$PREV_TAG" ]; then
            # First release - get all commits
            COMMITS=$(git log --pretty=format:"- %s" --no-merges)
          else
            # Get commits since previous tag
            COMMITS=$(git log --pretty=format:"- %s" --no-merges ${PREV_TAG}..${VERSION})
          fi

          # Generate release notes
          {
            echo "release_notes<<EOF"
            echo "## What's New"
            echo ""
            echo "$COMMITS"
            echo ""
            echo "## Full Changelog"
            if [ -n "$PREV_TAG" ]; then
              echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREV_TAG}...${VERSION}"
            fi
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@c062e08bd532815e2082a85e87e3ef29c3e6d191 # v2.0.8
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: Release ${{ steps.get_version.outputs.version }}
          body: |
            ${{ steps.release_notes.outputs.release_notes }}

            ---

            ## Installation

            ### Windows (Recommended: MSI Installer)

            Download and install `nameback-x86_64-pc-windows-msvc.msi`

            **What you get:**
            - 🖥️ **CLI**: Type `nameback` in any terminal (automatically added to PATH)
            - 🎨 **GUI**: Launch from Start Menu → nameback

            **Alternative: Portable Executables**
            - CLI: `nameback-x86_64-pc-windows-msvc.exe`
            - GUI: `nameback-gui-x86_64-pc-windows-msvc.exe`

            Then install dependencies:
            ```powershell
            nameback --install-deps
            ```

            ### macOS (Recommended: Homebrew)

            ```bash
            brew tap h4x0r/nameback
            brew install nameback
            ```
            Automatically installs all dependencies: exiftool, tesseract, ffmpeg, imagemagick

            **Alternative: Direct Download (with GUI)**

            Intel:
            ```bash
            # CLI
            curl -L -o nameback https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.version }}/nameback-x86_64-apple-darwin
            chmod +x nameback
            sudo mv nameback /usr/local/bin/

            # GUI (optional)
            curl -L -o nameback-gui https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.version }}/nameback-gui-x86_64-apple-darwin
            chmod +x nameback-gui
            sudo mv nameback-gui /usr/local/bin/
            ```

            Apple Silicon:
            ```bash
            # CLI
            curl -L -o nameback https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.version }}/nameback-aarch64-apple-darwin
            chmod +x nameback
            sudo mv nameback /usr/local/bin/

            # GUI (optional)
            curl -L -o nameback-gui https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.version }}/nameback-gui-aarch64-apple-darwin
            chmod +x nameback-gui
            sudo mv nameback-gui /usr/local/bin/
            ```

            ### Linux

            ```bash
            cargo install nameback
            nameback --install-deps
            ```

            ## Verification

            All binaries include SHA256 checksums in `checksums.txt`

            ---
            🤖 Generated with [Claude Code](https://claude.com/claude-code)
          draft: false
          prerelease: false

  build-release:
    name: Build ${{ matrix.target }}
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            archive: zip

          # macOS Intel
          - target: x86_64-apple-darwin
            os: macos-13
            archive: tar.gz

          # macOS Apple Silicon
          - target: aarch64-apple-darwin
            os: macos-latest
            archive: tar.gz

    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@21dc36fb71dd22e3317045c0c31a3f4249868b17 # stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Install dependencies (macOS only)
        if: runner.os == 'macOS'
        run: |
          brew install exiftool tesseract tesseract-lang ffmpeg imagemagick pkg-config

      - name: Cache vcpkg (Windows only)
        if: matrix.os == 'windows-latest'
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: C:\vcpkg\installed
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-

      - name: Install vcpkg and dependencies (Windows only)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          if (-not (Test-Path C:\vcpkg)) {
            Write-Host "Cloning vcpkg..."
            git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg
          } else {
            Write-Host "vcpkg already exists, skipping clone"
          }
          cd C:\vcpkg
          if (-not (Test-Path .\vcpkg.exe)) {
            Write-Host "Bootstrapping vcpkg..."
            .\bootstrap-vcpkg.bat
          }
          Write-Host "Installing leptonica and tesseract..."
          .\vcpkg integrate install
          .\vcpkg install leptonica:x64-windows-static-md tesseract:x64-windows-static-md

      - name: Set VCPKG_ROOT and triplet (Windows only)
        if: matrix.os == 'windows-latest'
        run: |
          echo "VCPKG_ROOT=C:\vcpkg" >> $GITHUB_ENV
          echo "VCPKGRS_TRIPLET=x64-windows-static-md" >> $GITHUB_ENV
        shell: bash

      - name: Build CLI release binary
        run: cargo build --release --target ${{ matrix.target }} -p nameback

      - name: Build GUI release binary
        run: cargo build --release --target ${{ matrix.target }} -p nameback-gui

      - name: Strip binaries (Unix only)
        if: matrix.os != 'windows-latest'
        run: |
          strip target/${{ matrix.target }}/release/nameback
          strip target/${{ matrix.target }}/release/nameback-gui

      - name: Create archive with CLI and GUI (Unix)
        if: matrix.archive == 'tar.gz'
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ../../../nameback-${{ matrix.target }}.tar.gz nameback nameback-gui
          cd ../../..

      - name: Create archive with CLI and GUI (Windows)
        if: matrix.archive == 'zip'
        shell: pwsh
        run: |
          cd target/${{ matrix.target }}/release
          Compress-Archive -Path nameback.exe,nameback-gui.exe -DestinationPath ../../../nameback-${{ matrix.target }}.zip
          cd ../../..

      - name: Generate SHA256 checksum (Unix)
        if: matrix.archive == 'tar.gz'
        run: |
          shasum -a 256 nameback-${{ matrix.target }}.tar.gz > nameback-${{ matrix.target }}.tar.gz.sha256

      - name: Generate SHA256 checksum (Windows)
        if: matrix.archive == 'zip'
        shell: pwsh
        run: |
          $hash = (Get-FileHash -Algorithm SHA256 nameback-${{ matrix.target }}.zip).Hash.ToLower()
          "$hash  nameback-${{ matrix.target }}.zip" | Out-File -Encoding ASCII nameback-${{ matrix.target }}.zip.sha256

      - name: Upload archive to release
        uses: softprops/action-gh-release@c062e08bd532815e2082a85e87e3ef29c3e6d191 # v2.0.8
        with:
          tag_name: ${{ needs.create-release.outputs.version }}
          files: |
            nameback-${{ matrix.target }}.${{ matrix.archive }}
            nameback-${{ matrix.target }}.${{ matrix.archive }}.sha256

      - name: Upload CLI binary (Unix)
        if: matrix.os != 'windows-latest'
        uses: softprops/action-gh-release@c062e08bd532815e2082a85e87e3ef29c3e6d191 # v2.0.8
        with:
          tag_name: ${{ needs.create-release.outputs.version }}
          files: target/${{ matrix.target }}/release/nameback

      - name: Upload GUI binary (Unix)
        if: matrix.os != 'windows-latest'
        uses: softprops/action-gh-release@c062e08bd532815e2082a85e87e3ef29c3e6d191 # v2.0.8
        with:
          tag_name: ${{ needs.create-release.outputs.version }}
          files: target/${{ matrix.target }}/release/nameback-gui

      - name: Upload CLI binary (Windows)
        if: matrix.os == 'windows-latest'
        uses: softprops/action-gh-release@c062e08bd532815e2082a85e87e3ef29c3e6d191 # v2.0.8
        with:
          tag_name: ${{ needs.create-release.outputs.version }}
          files: target/${{ matrix.target }}/release/nameback.exe

      - name: Upload GUI binary (Windows)
        if: matrix.os == 'windows-latest'
        uses: softprops/action-gh-release@c062e08bd532815e2082a85e87e3ef29c3e6d191 # v2.0.8
        with:
          tag_name: ${{ needs.create-release.outputs.version }}
          files: target/${{ matrix.target }}/release/nameback-gui.exe

      - name: Install WiX Toolset (Windows only)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          dotnet tool install --global wix
          wix extension add -g WixToolset.UI.wixext

      - name: Build MSI installer (Windows only)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          wix build -arch x64 -o nameback-${{ matrix.target }}.msi installer/nameback.wxs

      - name: Generate MSI checksum (Windows only)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $hash = (Get-FileHash -Algorithm SHA256 nameback-${{ matrix.target }}.msi).Hash.ToLower()
          "$hash  nameback-${{ matrix.target }}.msi" | Out-File -Encoding ASCII nameback-${{ matrix.target }}.msi.sha256

      - name: Upload MSI installer and checksum (Windows only)
        if: matrix.os == 'windows-latest'
        uses: softprops/action-gh-release@c062e08bd532815e2082a85e87e3ef29c3e6d191 # v2.0.8
        with:
          tag_name: ${{ needs.create-release.outputs.version }}
          files: |
            nameback-${{ matrix.target }}.msi
            nameback-${{ matrix.target }}.msi.sha256

  generate-checksums:
    name: Generate Combined Checksums
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    steps:
      - name: Download all release assets
        uses: robinraju/release-downloader@a96f54c1b5f5e09e47d9504526e96febd949d4c2 # v1.11
        with:
          tag: ${{ needs.create-release.outputs.version }}
          fileName: '*.sha256'
          out-file-path: checksums

      - name: Combine checksums
        run: |
          cat checksums/*.sha256 > checksums.txt
          echo "Combined checksums:"
          cat checksums.txt

      - name: Upload combined checksums
        uses: softprops/action-gh-release@c062e08bd532815e2082a85e87e3ef29c3e6d191 # v2.0.8
        with:
          tag_name: ${{ needs.create-release.outputs.version }}
          files: checksums.txt

  publish-crates-io:
    name: Publish to crates.io
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    # Skip publishing for pre-release tags (e.g., -test, -rc, -alpha, -beta)
    if: ${{ !contains(needs.create-release.outputs.version, '-') }}
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@21dc36fb71dd22e3317045c0c31a3f4249868b17 # stable
        with:
          toolchain: stable

      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: cargo publish --allow-dirty --no-verify
